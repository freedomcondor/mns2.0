diff --git a/src/plugins/robots/drone/hardware/drone.cpp b/src/plugins/robots/drone/hardware/drone.cpp
index 3da9bb9..0e0c96a 100644
--- a/src/plugins/robots/drone/hardware/drone.cpp
+++ b/src/plugins/robots/drone/hardware/drone.cpp
@@ -91,13 +91,18 @@ namespace argos {
             }
          }
          /* Create the triggers */
+         /*
          std::ofstream cAddTrigger;
          cAddTrigger.open(ADD_TRIGGER_PATH);
          cAddTrigger << std::to_string(SENSOR_TRIGGER_IDX) << std::flush;
          cAddTrigger.close();
+         */
          /* Create a local context for the IIO library */
+         /*
          m_psContext = iio_create_local_context();
+         */
          /* validate the sensor update trigger */
+         /*
          std::string strSensorUpdateTrigger("sysfstrig" + std::to_string(SENSOR_TRIGGER_IDX));
          m_psSensorUpdateTrigger = 
             ::iio_context_find_device(m_psContext, strSensorUpdateTrigger.c_str());
@@ -107,6 +112,7 @@ namespace argos {
          if(!::iio_device_is_trigger(m_psSensorUpdateTrigger)) {
             THROW_ARGOSEXCEPTION("IIO device \"" << strSensorUpdateTrigger << "\" is not a trigger");
          }
+         */
          /* go through the actuators */
          std::string strImpl;
          /* Go through actuators */
@@ -174,7 +180,7 @@ namespace argos {
              !m_unLength || unControllerTick < m_unLength;
              ++unControllerTick) {
             /* request samples from the sensors */
-            ::iio_device_attr_write_bool(m_psSensorUpdateTrigger, "trigger_now", true);
+            //::iio_device_attr_write_bool(m_psSensorUpdateTrigger, "trigger_now", true);
             /* update the sensors on this thread */
             for(CPhysicalSensor* pc_sensor : m_vecSensors) {
                pc_sensor->Update();
@@ -224,7 +230,7 @@ namespace argos {
       for(CPhysicalSensor* pc_sensor : m_vecSensors)
          delete pc_sensor;
       /* delete the IIO library's context */
-      iio_context_destroy(m_psContext);
+      //iio_context_destroy(m_psContext);
       /* remove triggers */
       std::ofstream cRemoveTrigger;
       cRemoveTrigger.open(REMOVE_TRIGGER_PATH);
